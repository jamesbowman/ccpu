include(ga144.hdr)

include(708out.hdr)

\ relevant output pins:

\ GND     J27.1
\ 709.ao  J27.2
\ 713.ao  J27.5     blue
\ 717.ao  J27.7     red

\ 617.ao  J21.1     green
\             2
\ 517.17  J21.3     
\ 417.17  J21.4     HSYNC (yellow)
\ 317.17  J21.5     VSYNC (red)
\ 117.ao  J21.7

define(WIRE_64DIV, `
    @p a! @p
        $1
        $2
    b!
: again
    @ 2/ 2/
    2/ 2/ 2/
    2/ !b jump again')

define(DAC, `
      @p a!
        $1
      @p b!
        io
      @p
        0x155
: again
      @ 2* 2*
      2* over or
      !b jump again')

---------------------------- 608 ----------------------------
    @p a! @p @p
        NORTH
        1
        1
    over over . +
: cold
    dup !
: again
    jump again

---------------------------- 717 ----------------------------
DAC(WEST)

---------------------------- 617 ----------------------------
DAC(SOUTH)

---------------------------- 713 ----------------------------
DAC(EAST)

---------------------------- 714 ----------------------------
WIRE(EAST, WEST)

---------------------------- 715 ----------------------------
WIRE_64DIV(EAST, WEST)

---------------------------- 517 ----------------------------
WIRE(SOUTH, NORTH_WEST)

---------------------------- 516 ----------------------------
WIRE(EAST, NORTH)

---------------------------- 616 ----------------------------
WIRE_64DIV(SOUTH, NORTH)

---------------------------- 716 ----------------------------
WIRE(SOUTH, EAST_WEST)

---------------------------- 417 ----------------------------

\ http://tinyvga.com/vga-timing/640x480@60Hz

: again
    @p call vsync   \ sync
      0x20000
    @p call  lines
      2-1
    @p call vsync
      0x30000
    @p call  lines  \ back porch
      33-1
    @p call  lines  \ frame
      480-1
    @p call  lines  \ front porch
      10-1
    jump again
: lines
    push
: lineloop
    @p a!
      NORTH
    @p b! @p @p
      io
      0x20000
      0x30000

    over !b                 \ vsync low
    @p call delay
      int(3.8133/.00248)    \ sync pulse
    dup !b                  \ vsync high

    @p call delay
      int((1.906)/.00248)   \ back porch

\   @p call delay
\     int((25.422)/.00248)

    @p a!
      WEST
    @p b!
      NORTH
    @p push
      640-1
: display
      . . @ .
      . . !b .
      . . . .
      . next display
    dup or !b

    @p call delay
      int(0.6355/.00248)    \ front porch

\    dup !b    \ high
\    @p call delay
\      int(27.96/.00248)
\    over !b    \ low
\    @p call delay
\      int(3.8133/.00248)

    next lineloop
    ;
: delay
    push
    unext ;

: vsync
    @p a! ! ;
      SOUTH
---------------------------- 317 ----------------------------
WIRE(NORTH, io)

---------------------------- 416 ----------------------------

\ Like a wire node from WEST to EAST, but inserts zero pixels
\ for the non-visible lines

    @p a!
      WEST
    @p b!
      EAST

: screen
    @p call zeroes
      640*35-1

    \ 640*480 does not fit in 18 bits, so do it twice
    @p dup
      (640*480)/2-1
    push push
    @ !b unext
    @ !b unext

    @p call zeroes
      640*10-1
    jump screen

: zeroes ( n -- ) \ send n zeroes to b
    push
    dup dup or
    dup !b unext ;

\ CONVEYOR(N) carries N words from WEST then a single word
\ from NORTH.
define(CONVEYOR, `
    @p b!
      EAST
: again
    @p a! @
      NORTH
    !b @p a! @p
      WEST
      $1-1
    push
    @ !b unext
    jump again
')

---------------------------- 415 ----------------------------
CONVEYOR(15)

---------------------------- 414 ----------------------------
CONVEYOR(14)

---------------------------- 413 ----------------------------
CONVEYOR(13)

---------------------------- 412 ----------------------------
CONVEYOR(12)

---------------------------- 411 ----------------------------
CONVEYOR(11)

---------------------------- 410 ----------------------------
CONVEYOR(10)

---------------------------- 409 ----------------------------
CONVEYOR(9)

---------------------------- 408 ----------------------------
CONVEYOR(8)

---------------------------- 407 ----------------------------
CONVEYOR(7)

---------------------------- 406 ----------------------------
CONVEYOR(6)

---------------------------- 405 ----------------------------
CONVEYOR(5)

---------------------------- 404 ----------------------------
CONVEYOR(4)

---------------------------- 403 ----------------------------
CONVEYOR(3)

---------------------------- 402 ----------------------------
CONVEYOR(2)

---------------------------- 401 ----------------------------
CONVEYOR(1)

---------------------------- 400 ----------------------------
WIRE(NORTH, EAST)

define(GREEN, `
    @p @p @p
      0xffff
      0xffff
      0xffff
')

define(RAMPS, `
    call x
    call y
    +
    2* 2* 2*
    2* 2* 2*
    dup dup
')
define(CHECKER, `
    call t
    dup call x
    . +
    over call y
    . +

    or @p and
      64
    if iszero
    @p @p
      0xffff
      0
    call x
    2* 2* 2*
    2* 2*
    jump done
: iszero
    call y
    2* 2* 2*
    2* 2* 2*
    @p @p
      0xffff
      0
: done
')

define(CIRCLE, `
    call x
    call y
    a! @p @p
      0
      17
    push
    +* unext a
    @p . +
      -(10**2)
    -if iszero
    @p @p @p
      0xffff
      0
      0x3333
    jump done
: iszero
    @p @p @p
      0x5555
      0xffff
      0
: done
')

define(BODY, CHECKER)

\   @p push
\     224       \ 3 nodes: 35, 4 nodes: 48, 16 nodes 224
\   unext

define(PIXEL_GEN, `
---------------------------- $1 ----------------------------
    @p b!
      $2
: again
    BODY

    \ ( r g b ), now reformat to 18-bit BRG
    \ b: msb 15 to 17
    \ g: msb 15 to 5
    \ r: msb 15 to 11

    \ blue
    call channel
    2* 2* push

    \ green
    call channel
    2/ 2/ 2/
    2/ 2/ 2/
    2/ 2/ 2/
    2/ push

    \ red
    call channel
    2/ 2/ 2/
    2/ pop pop
    or or

    !b call bump
    jump again

: channel
    @p and ;
      0xfc00

: bump
    call x
    @p . +
      16
    dup @p . +
      -640
    -if bumpy
    drop
: storex
    @p drop !p ;
: x
    @p ;
      $3
    
: bumpy
    call storex
    call y
    @p . +
      1
    dup @p . +
      -480
    -if bumpt
    drop
: storey
    @p drop !p ;
: y
    @p ;
      0
: bumpt
    call storey
    call t
    @p . +
      1
    @p drop !p ;
: t
    @p ;
      0

')

PIXEL_GEN(500, SOUTH, 15)
PIXEL_GEN(501, SOUTH, 14)
PIXEL_GEN(502, SOUTH, 13)
PIXEL_GEN(503, SOUTH, 12)
PIXEL_GEN(504, SOUTH, 11)
PIXEL_GEN(505, SOUTH, 10)
PIXEL_GEN(506, SOUTH, 9)
PIXEL_GEN(507, SOUTH, 8)
PIXEL_GEN(508, SOUTH, 7)
PIXEL_GEN(509, SOUTH, 6)
PIXEL_GEN(510, SOUTH, 5)
PIXEL_GEN(511, SOUTH, 4)
PIXEL_GEN(512, SOUTH, 3)
PIXEL_GEN(513, SOUTH, 2)
PIXEL_GEN(514, SOUTH, 1)
PIXEL_GEN(515, SOUTH, 0)

---------------------------- 300 ----------------------------
: wave
   call linUp
   call linDn   
   jump wave

: linUp
   dup or @p
     0xFE
: uploop
   dup @p or
     0x155
   !b @p . + 
     2
   next uploop
   ;

: linDn   
   @p
     0xFE
: downloop
   dup @p or
     0x155
   !b @p . +
     -2
   next downloop
   ;
