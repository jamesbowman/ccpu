include(ga144.hdr)

include(708out.hdr)

---------------------------- 608 ----------------------------
WIRE(SOUTH, NORTH)

---------------------------- 508 ----------------------------
WIRE(SOUTH, NORTH)

---------------------------- 408 ----------------------------
WIRE(SOUTH, NORTH)

---------------------------- 308 ----------------------------
WIRE(SOUTH, NORTH)

---------------------------- 208 ----------------------------
WIRE(WEST, NORTH)

---------------------------- 207 ----------------------------
WIRE(SOUTH, EAST)

---------------------------- 107 ----------------------------
\ This is the VM

    jump SOUTH    \ 16 registers
    0x1001
    0x2002
    0x3003
    0x4004
    0x5005
    0x6006
    0x7007
    0x8008
    0x9009
    0xa00a
    0xb00b
    0xc00c
    0xd00d
    0xe00e
    0xf00f

\ : goto
\   pop a! @
\   a push !b ;
\ 
\ : reg
\   pop a! @+
\   a push
\   @p and a!
\     15
\   @ ;
\ : emit
\   @p a! ! ;
\     NORTH
\ : imm
\   pop a! @+
\   @+ a push
\   a!  ! ;
\ : dec
\   pop a! @+
\   a push a!
\   @ @p . +
\     -1
\   ! ;
\ : jnz
\   pop a! @+
\   @+ a push
\   a!
\   @ 2* 2*
\   if quit
\     drop !b ;
\ : quit
\   ;

: generic
  call  lo4
  a! call  lo4
  @p and push 
  63
  @ push a!
  @ pop ;

: lo4
  dup 2/ push @p
  15
  and pop 2/
  2/ 2/ ;

\ called with ( dst src ) and A pointing to dst
: _sub
  - @p . +
    1
: _add
  + ! ;
: _and
  and ! ;
: _xor
  or ! ;
: _or
  over - and
  or ! ;
: _lsh
  push
  2* unext ! ;
: _rsh
  push 2* 2*
  2/ unext ! ;
\ memory read, 8,16
\ memory write: 8,16
\ save, restore
\ call,return
\ compare, branch

\ Memory operations:
\   set pc
\   write pc, set pc
\   

---------------------------- 108 ----------------------------
\ Wire node. Copy from WEST to SOUTH, anding with 0xffff
    @p a! @p
        WEST
        SOUTH
    b!
    @p dup dup
      0xffff
    dup dup dup
    dup dup dup
    dup 
: again
    @ and !b
    jump again

---------------------------- 007 ----------------------------
\ RAM's data return. Set up to copy from data to NORTH, with
\ 0x20000 on the data stack.
    @p a! @p
      io
      0x0000
    !
    @p b! @p
      NORTH
      data
    a!
    @p dup dup
      0x20000
    dup dup dup
    dup dup dup
    dup
    jump EAST

---------------------------- 008 ----------------------------
\ RAM controller. Continuously fetch from incrementing
\ PC. If a new PC arrives from 108, use it.
LOADR_4(EAST, 1, WEST, @ or !b .)
    @p @p @p
      0
      0b100000000000101110
      io
    b! !b
    jump loop

: toc
      pop pop
      @p a! @
        NORTH 

: loop
    \ write PC to 009
    pop a! dup

    \ increment PC
    ! pop . +

    \ io.Dw (bit 13) is one if 108 is writing
    @b 2* 2*
    2* 2* -
    -if toc

    \ Send "read" instruction to 007
    drop pop a!
    pop !

    jump loop

---------------------------- 009 ----------------------------
WIRE(WEST, data)

\ Pin 100.17 is an output. 101-106 are wires to carry signal.
---------------------------- 100 ----------------------------
    @p a!
      EAST
    @p b!
      io
: again
    @ @p and
      1
    @p or
      2
    @p push
      15
    2* unext
    !b
    jump again

---------------------------- 101 ----------------------------
WIRE(EAST, WEST)
---------------------------- 102 ----------------------------
WIRE(EAST, WEST)
---------------------------- 103 ----------------------------
WIRE(EAST, WEST)
---------------------------- 104 ----------------------------
WIRE(EAST, WEST)
---------------------------- 105 ----------------------------
WIRE(EAST, WEST)
---------------------------- 106 ----------------------------
WIRE(EAST, WEST)
