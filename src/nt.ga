include(ga144.hdr)

define(READ_FOREVER, `')
include(708out.hdr)

PLOW(`WIRE', 607, WEST, EAST, NORTH)

---------------------------- 705 ----------------------------
\ See block 1428 for ROM definitions
\ For usage notes:
\   https://mschuldt.github.io/www.colorforth.com/flash.htm
\   http://ww1.microchip.com/downloads/en/DeviceDoc/25024C.pdf
\ EVB001 note: check jumpers J20 and J26

include(romSPI.hdr)

    @p a!
      EAST
    @p b!
      io
    @p @p
      0x2b
      0x2a
: again
    @p call cmd
      eval(`0x03 << 10')    \ read
    @p a! @
      SOUTH
    call 24o
    dup push
    over over over
    over over over @p
      EAST
    a! call in8
    pop !
    dup !
    @p and push
      63
: readloop
    call in18
    ! next readloop
    jump again

: cmd   \ n-
    @p !b @p
      0x2f
      7
    push jump oloop
: 24o
    @p push
      23
: oloop
    -if tx0

    2* @p !b @p
      0x3a
      0x3b
    !b next oloop
    drop ;

: tx0

    push dup !b
    over !b pop
    2* next oloop
    drop ;

    .
    .
    .

: in8
    dup dup or @p
      7
    push jump inloop

: in18
    @p push dup
      17
: inloop
    push !b !b
    pop @b -if got0
    drop - 2*
    - next inloop
    ;
: got0
    drop 2* next inloop
    ;

---------------------------- 506 ----------------------------

    @p b!
      NORTH
: main
    jump NORTH
: addr                      \ ( -- o )
                            \ fetch byte address 0-383
                            \ set A to bank
                            \ o to offset 0-63
    2/ dup 2/
    2/ 2/ 2/
    2/ 2/ call tab
      WEST                  \ 3 bank nodes
      SOUTH
      EAST
: tab
    pop + a!
    @ a! @p
      63
    and ;

: @
    @b call addr
    @p ! !
      @p a! @ !p
    @ !b ;

: !
    @b call addr
    @p ! ! @p
      @p a! . .
      @p ! . .
    ! @b ! ;

: c@
  @b dup dup
  call addr
  @p ! !
    @p a! @ !p
  2/ 2* or                \ low bit of addr
  2* 2* 2*                \ 0 or 8
  push @ next hibyte
: lo8
  @p and !b ;
    255
: hibyte
  2/ unext jump lo8

: c!
    @b dup
    call addr
    @p ! !
      @p a! . .
    ! @b ! ;

\ The three banks for the RAM
---------------------------- 505 ----------------------------
: cold
    jump EAST
    50502
    50504

---------------------------- 507 ----------------------------
: cold
    jump WEST
    50702
    50704

---------------------------- 406 ----------------------------
: cold
    jump NORTH
    40602
    40604

---------------------------- 706 ----------------------------
    @p a! @p
        WEST
        SOUTH
    b!
: again
    @ @
    dup @p push
      9
    2* unext
    -if noreturn
    @p !b
      call 606.DORETURN
: noreturn
    drop
    @p and push
      63
    @ !b unext
    jump again

---------------------------- 605 ----------------------------
\ R stk
  
    @p b!
      NORTH         \ to F
    @p a!
      RSTACKTOP
: main
    jump EAST       \ port exe from X
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
: RSTACKTOP
: RETURN
    @+ !b ;
: RPUSH
    @p a +
      -1
    a! ! ;

---------------------------- 606 ----------------------------
\ D stk and execute

    @p b!
      WEST          \ R stk
    @p a!
      STACKTOP
    @p
      0x947
: again
    @p call GO
      0
    jump NORTH      \ port exe from D
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
: STACKTOP
: TO_R
    @p !b !b ;
      @p call 605.RPUSH
: DORETURN
    @p !b ;
      call 605.RETURN
: IFELSE          \ a b f : if (f) a else b
    if TWOD
    drop
: TWOD
    drop
: GO
    @p !b !b ;
      @p !b
: LIT
    over
: -!
    @p a +
      -1
    a! ! ;
: 18shr
  @p push
    8
  2/ 2/ unext ;
: swap
  over push over
  or or pop
  jump NORTH
