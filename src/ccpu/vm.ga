---------------------------- 508 ----------------------------

  @p b!
    EAST
  @p a!
    WEST

  @p dup push dup
    loop
  push dup push dup
  push dup push dup
  push dup push dup
  push dup push

: here
  0
  0
  0
  0
  0
  0
  0
  0

: loop              \ main execution loop
  call fetch
  jump WEST

: offset            \ ( opcode -- disp ) extract branch target -256..254
  2* @p push
    5
  2/ unext ;

: srcdst            \ ( opcode -- src dst )
  2/ 2/ 2/ dup
  push call ea@
  pop 2/ call offset
: ea@               \ ( field -- v )
  dup push @p       \ fetch R
    7
  and a! @
  pop @p and
    0b111000
  2/ 2/ 2/
  call case
  ;                 \ Rn
  jump  postinc     \ [Rn+]
  jump  predec      \ [-Rn]
  call  postinc     \ [[Rn+]]
  jump  ram@        \ [Rn]
  jump  indexed     \ [Rn+X]
  jump  cram@       \ byte[Rn]
: cpostinc          \ byte[Rn+]
  dup @p . +
    1
  ! jump cram@

: indexed           \ X(Rn)
  call  fetch
  + jump ram@

: predec \ ( rptr )
  @p . +
    -2
  dup !
: ram@ ( a -- v )
  2/ @p !b @p
    @p a! @ !p
    @p ! . .
  a! !b @b ;

: postinc
  dup @p . +
    2
  !  jump ram@

: ram! ( v -- )
  a !b !b ;

: cram@ ( a -- v )
  @p !b !b @p
    @p call 0
    @p call 1
  a! @b ;

: fetch             \ fetch next word from PC by evaluating @(PC)+
  @p jump ea@
    037

: case
  pop + push ;

: conditional       \ ( opcode f -- ) if T is zero, take the branch
  if notake
: take
  drop 
  @p a! @ .
    7
  + ! ;

: rconditional      \ ( offset f -- ) if T is nonzero, take the branch in N
  if take
: notake
  drop drop ;

: oflip ( a b -- a b 'a )   \ number range flip for "cmps"
  over @p or ;
    8000

: pushit ( x 37 -- )
  call ea@
  drop jump ram!
