---------------------------- 508 ----------------------------

: here
  jump WEST
  100
  200
  0
  0
  0
  128
  0

: ashr5               \ ( u -- u ) shift left 1, right 6
  2* @p push
    5
  2/ unext ;

: srcdst              \ ( opcode/2 -- src dst )
  2/ 2/ 2/ dup
  push call ea@
  pop 2/ call ashr5
: ea@                 \ ( field -- v )
  dup push @p         \ fetch R
    7
  and b! @b           \ ( reg ) b points to reg
  pop @p and
    0b111000
  2/ 2/ 2/
  call case           \ ( reg ) b points to reg
  ;                   \ Rn
  jump  postinc       \ [Rn+]
  jump  predec        \ [-Rn]
  call  postinc       \ [[Rn+]]
  jump  ram@          \ [Rn]
  jump  indexed       \ [Rn+X]
  jump  cram@         \ byte[Rn]
  b! ;                \ hw[Rn]

: predec \ ( rptr )
  @p . +
    -2
  dup !b
: ram@ ( addr -- v )  \ a is EAST
  2/ @p @p
    @p a! @ !p        \ WORD read insn
    @p ! . .          \ WORD write insn
: ramcommon           \ ( x y z -- v ) EAST into b, z into a, write (y x) to b, read v from b
  @p b! a!
    EAST
  !b !b @b ;
: cram@ ( a -- v )    \ byte[Rn]
  @p @p jump ramcommon
    @p call 0         \ BYTE read insn
    @p call 1         \ BYTE write insn

: indexed
  call  fetch
  + jump ram@

: fetch             \ fetch next word from PC
  @p b! @b
    7
: postinc
  dup @p . +
    2
  !b jump ram@

: result ( v -- v )
  dup @p and
    0xffff
  a !b !b ;

: case
  pop + push ;

: conditional       \ ( opcode f -- ) if T is nonzero, take the branch
  if notake
: take
  drop 
: dobra
  @p a! @ .
    7
  + ! ;

: rconditional      \ ( offset f -- ) if T is zero, take the branch in N
  if take
: notake
  drop drop ;

: oflip ( a b -- a b 'a )   \ number range flip for "cmps"
  over @p or ;
    0x8000

: pushit ( x 37 -- )
  call ea@
  drop jump result
